{"name": "test_professional_registration", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for get_by_text(\"Professionnel\")", "trace": "page = <Page url='https://opencruise-ok.sogeti-center.cloud/login?returnUrl=%2F'>\nbase_url = 'https://opencruise-ok.sogeti-center.cloud'\n\n    def test_professional_registration(page, base_url):\n        # Charger les données depuis pro.json\n        data = load_data(\"data/pro.json\")\n        prof_data = data[\"professional\"]\n        rep_data = data[\"representative\"]\n    \n        # Générer des emails aléatoires\n        prof_data[\"email\"] = fake.email()\n        rep_data[\"email\"] = fake.email()\n    \n        page.goto(f\"{base_url}/login?returnUrl=%2F\")\n    \n        reg_page = ProfessionalRegistrationPage(page)\n>       reg_page.navigate_to_registration()\n\ntests\\test_professional_registration.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\professional_registration_page.py:9: in navigate_to_registration\n    self.page.get_by_text(\"Professionnel\").click()\nvenv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\nvenv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\nvenv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\nvenv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x00000239C136B4D0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000239C1607380>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for get_by_text(\"Professionnel\")\n\nvenv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError"}, "start": 1741771323683, "stop": 1741771358678, "uuid": "6749bb9e-07e1-4a69-ac95-55694710c972", "historyId": "d91ac3bcbdfe736f5ae9b31ba0af8bdd", "testCaseId": "d91ac3bcbdfe736f5ae9b31ba0af8bdd", "fullName": "tests.test_professional_registration#test_professional_registration", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_professional_registration"}, {"name": "host", "value": "Daura"}, {"name": "thread", "value": "15020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_professional_registration"}]}